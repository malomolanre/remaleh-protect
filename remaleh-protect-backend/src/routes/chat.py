from flask import Blueprint, request, jsonify
import openai
import os
import re

chat_bp = Blueprint('chat', __name__)

# Cybersecurity knowledge base for rule-based responses
def get_rule_based_response(message):
    """
    Check if message matches known cybersecurity topics and return rule-based response
    Returns None if no match found (should use LLM)
    """
    lowerMessage = message.lower()
    
    # Password-related queries
    if any(keyword in lowerMessage for keyword in ['password', 'passwords', '2fa', 'two factor', 'authentication']):
        return {
            "response": "üîê **Password Security Best Practices:**\n\n‚Ä¢ Use unique passwords for each account\n‚Ä¢ Enable two-factor authentication (2FA)\n‚Ä¢ Use a reputable password manager\n‚Ä¢ Passwords should be 12+ characters with mixed case, numbers, and symbols\n‚Ä¢ Never share passwords via email or text\n‚Ä¢ Change passwords immediately if you suspect a breach\n\nWould you like specific help with password management tools or setting up 2FA?",
            "confidence": "high",
            "source": "rule_based",
            "show_guardian": False
        }
    
    # Phishing/scam queries
    if any(keyword in lowerMessage for keyword in ['phishing', 'scam', 'suspicious email', 'fake email', 'spam']):
        return {
            "response": "üé£ **Phishing & Scam Protection:**\n\n‚Ä¢ Check sender's email address carefully\n‚Ä¢ Look for urgent language or threats\n‚Ä¢ Verify links before clicking (hover to see real URL)\n‚Ä¢ Don't download unexpected attachments\n‚Ä¢ When in doubt, contact the organization directly\n‚Ä¢ Use our 'Check Text' feature to analyze suspicious messages\n\nIf you're dealing with an active threat or need immediate assistance, I can connect you with a Remaleh Guardian.",
            "confidence": "high",
            "source": "rule_based",
            "show_guardian": True
        }
    
    # Malware/virus queries
    if any(keyword in lowerMessage for keyword in ['malware', 'virus', 'infected', 'ransomware', 'trojan']):
        return {
            "response": "ü¶† **Malware Protection & Response:**\n\n‚Ä¢ Keep your antivirus software updated\n‚Ä¢ Run regular system scans\n‚Ä¢ Avoid downloading software from untrusted sources\n‚Ä¢ Keep your operating system updated\n‚Ä¢ If infected: disconnect from internet, run antivirus scan\n‚Ä¢ For ransomware: DO NOT pay - contact authorities\n\n‚ö†Ô∏è **If you suspect active malware infection, this requires immediate expert assistance.**",
            "confidence": "high",
            "source": "rule_based",
            "show_guardian": True
        }
    
    # Data breach queries
    if any(keyword in lowerMessage for keyword in ['data breach', 'breach', 'hacked', 'compromised', 'stolen data']):
        return {
            "response": "üö® **Data Breach Response:**\n\n‚Ä¢ Change passwords for affected accounts immediately\n‚Ä¢ Enable 2FA on all important accounts\n‚Ä¢ Monitor your accounts for suspicious activity\n‚Ä¢ Check credit reports for unauthorized activity\n‚Ä¢ Use our 'Password Safety Check' to see if your email appears in known breaches\n\nFor business data breaches or complex incidents, expert guidance is essential.",
            "confidence": "high",
            "source": "rule_based",
            "show_guardian": True
        }
    
    # Social media security
    if any(keyword in lowerMessage for keyword in ['social media', 'facebook', 'instagram', 'twitter', 'linkedin', 'tiktok']):
        return {
            "response": "üì± **Social Media Security:**\n\n‚Ä¢ Review privacy settings regularly\n‚Ä¢ Be selective with friend/connection requests\n‚Ä¢ Think before sharing personal information\n‚Ä¢ Use strong, unique passwords\n‚Ä¢ Enable 2FA on all social accounts\n‚Ä¢ Be cautious of suspicious links in messages\n‚Ä¢ Report and block suspicious accounts\n\nNeed help securing specific social media accounts?",
            "confidence": "high",
            "source": "rule_based",
            "show_guardian": False
        }
    
    # WiFi/network security
    if any(keyword in lowerMessage for keyword in ['wifi', 'network', 'public wifi', 'router', 'vpn']):
        return {
            "response": "üì∂ **Network & WiFi Security:**\n\n‚Ä¢ Avoid sensitive activities on public WiFi\n‚Ä¢ Use a VPN when on public networks\n‚Ä¢ Change default router passwords\n‚Ä¢ Use WPA3 encryption on home WiFi\n‚Ä¢ Regularly update router firmware\n‚Ä¢ Hide your network name (SSID) if possible\n‚Ä¢ Monitor connected devices regularly\n\nFor business network security, professional assessment is recommended.",
            "confidence": "high",
            "source": "rule_based",
            "show_guardian": True
        }
    
    # Mobile security
    if any(keyword in lowerMessage for keyword in ['mobile', 'phone', 'smartphone', 'app', 'android', 'iphone', 'ios']):
        return {
            "response": "üì± **Mobile Device Security:**\n\n‚Ä¢ Keep your OS and apps updated\n‚Ä¢ Only download apps from official stores\n‚Ä¢ Use screen locks (PIN, password, biometric)\n‚Ä¢ Enable remote wipe capabilities\n‚Ä¢ Be cautious with app permissions\n‚Ä¢ Avoid clicking suspicious text message links\n‚Ä¢ Use mobile antivirus if available\n\nConcerned about a specific mobile security issue?",
            "confidence": "high",
            "source": "rule_based",
            "show_guardian": False
        }
    
    # Business/enterprise security
    if any(keyword in lowerMessage for keyword in ['business', 'company', 'enterprise', 'employee', 'corporate']):
        return {
            "response": "üè¢ **Business Cybersecurity:**\n\n‚Ä¢ Implement employee security training\n‚Ä¢ Use endpoint protection on all devices\n‚Ä¢ Regular security audits and assessments\n‚Ä¢ Backup data regularly and test recovery\n‚Ä¢ Implement access controls and monitoring\n‚Ä¢ Have an incident response plan\n‚Ä¢ Consider cyber insurance\n\n**Business security requires professional consultation for proper implementation.**",
            "confidence": "high",
            "source": "rule_based",
            "show_guardian": True
        }
    
    # General help or greeting
    if any(keyword in lowerMessage for keyword in ['help', 'hello', 'hi', 'start']) or len(message.strip()) < 10:
        return {
            "response": "üëã **Welcome to Remaleh Cybersecurity Support!**\n\nI'm here to help with:\n‚Ä¢ Password security and management\n‚Ä¢ Phishing and scam identification\n‚Ä¢ Malware protection and response\n‚Ä¢ Data breach guidance\n‚Ä¢ Social media security\n‚Ä¢ Network and WiFi security\n‚Ä¢ Mobile device protection\n‚Ä¢ Business cybersecurity advice\n\n**What cybersecurity topic can I help you with today?**",
            "confidence": "high",
            "source": "rule_based",
            "show_guardian": False
        }
    
    # No rule-based match found
    return None

def get_llm_response(message, conversation_history):
    """
    Get response from OpenAI LLM for complex cybersecurity questions
    """
    try:
        # Build conversation context
        messages = [
            {
                "role": "system",
                "content": """You are a cybersecurity expert assistant for Remaleh Protect. 

IMPORTANT GUIDELINES:
- Provide accurate, helpful cybersecurity advice
- Keep responses concise but informative (2-3 paragraphs max)
- Use bullet points for actionable steps
- Always prioritize user safety
- If the question involves immediate threats, active malware, or business security incidents, recommend connecting with a Remaleh Guardian
- For complex technical issues beyond basic advice, suggest expert consultation
- Never provide advice that could compromise security
- Stay focused on cybersecurity topics

RESPONSE FORMAT:
- Use clear, professional language
- Include relevant emojis for visual appeal
- End with a question or offer for further help when appropriate

If the user needs expert human assistance, indicate this in your response."""
            }
        ]
        
        # Add conversation history (last 3 exchanges)
        for msg in conversation_history[-6:]:  # Last 3 user + 3 assistant messages
            if msg.get('type') == 'user':
                messages.append({"role": "user", "content": msg.get('content', '')})
            elif msg.get('type') in ['ai', 'llm']:
                messages.append({"role": "assistant", "content": msg.get('content', '')})
        
        # Add current message
        messages.append({"role": "user", "content": message})
        
        # Call OpenAI API
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=500,
            temperature=0.3,  # Lower temperature for more consistent responses
            top_p=0.9
        )
        
        llm_response = response.choices[0].message.content.strip()
        
        # Determine if Guardian assistance should be offered
        show_guardian = any(keyword in llm_response.lower() for keyword in [
            'expert', 'professional', 'guardian', 'immediate', 'urgent', 
            'complex', 'business', 'enterprise', 'incident', 'breach',
            'malware infection', 'ransomware', 'hacked'
        ])
        
        return {
            "response": llm_response,
            "confidence": "medium",
            "source": "llm",
            "show_guardian": show_guardian
        }
        
    except Exception as e:
        print(f"LLM Error: {str(e)}")
        return {
            "response": "I'm having trouble processing your question right now. For immediate cybersecurity assistance, please connect with a Remaleh Guardian who can help you directly.",
            "confidence": "low",
            "source": "error",
            "show_guardian": True
        }

@chat_bp.route('/message', methods=['POST'])
def chat_message():
    """
    Hybrid chat endpoint that uses rule-based responses first, then LLM fallback
    """
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        conversation_history = data.get('conversation_history', [])
        
        if not message:
            return jsonify({
                "response": "Please ask me a cybersecurity question and I'll be happy to help!",
                "source": "validation",
                "show_guardian": False
            }), 200
        
        # First, try rule-based response
        rule_response = get_rule_based_response(message)
        
        if rule_response:
            # Rule-based match found
            return jsonify({
                "response": rule_response["response"],
                "source": rule_response["source"],
                "confidence": rule_response["confidence"],
                "show_guardian": rule_response["show_guardian"],
                "escalated": False
            }), 200
        
        # No rule-based match, use LLM
        llm_response = get_llm_response(message, conversation_history)
        
        return jsonify({
            "response": llm_response["response"],
            "source": llm_response["source"],
            "confidence": llm_response["confidence"],
            "show_guardian": llm_response["show_guardian"],
            "escalated": False
        }), 200
        
    except Exception as e:
        print(f"Chat error: {str(e)}")
        return jsonify({
            "response": "I'm experiencing technical difficulties. Please connect with a Remaleh Guardian for immediate assistance.",
            "source": "error",
            "show_guardian": True,
            "escalated": True
        }), 500

